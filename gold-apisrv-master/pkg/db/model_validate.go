// Code generated by mfd-generator v0.4.0; DO NOT EDIT.

//nolint:all
//lint:file-ignore U1000 ignore unused code, it's generated
package db

import (
	"unicode/utf8"
)

const (
	ErrEmptyValue = "empty"
	ErrMaxLength  = "len"
	ErrWrongValue = "value"
)

func (u User) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(u.Login) > 64 {
		errors[Columns.User.Login] = ErrMaxLength
	}

	if utf8.RuneCountInString(u.Password) > 64 {
		errors[Columns.User.Password] = ErrMaxLength
	}

	if utf8.RuneCountInString(u.AuthKey) > 32 {
		errors[Columns.User.AuthKey] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (vf VfsFile) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(vf.Title) > 255 {
		errors[Columns.VfsFile.Title] = ErrMaxLength
	}

	if utf8.RuneCountInString(vf.Path) > 255 {
		errors[Columns.VfsFile.Path] = ErrMaxLength
	}

	if utf8.RuneCountInString(vf.MimeType) > 255 {
		errors[Columns.VfsFile.MimeType] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (vf VfsFolder) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(vf.Title) > 255 {
		errors[Columns.VfsFolder.Title] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (c Category) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(c.Title) > 256 {
		errors[Columns.Category.Title] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (n News) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(n.Title) > 256 {
		errors[Columns.News.Title] = ErrMaxLength
	}

	if utf8.RuneCountInString(n.Alias) > 256 {
		errors[Columns.News.Alias] = ErrMaxLength
	}

	if n.TagIDs == nil {
		errors[Columns.News.TagIDs] = ErrEmptyValue
	}

	return errors, len(errors) == 0
}

func (t Tag) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(t.Title) > 256 {
		errors[Columns.Tag.Title] = ErrMaxLength
	}

	return errors, len(errors) == 0
}
